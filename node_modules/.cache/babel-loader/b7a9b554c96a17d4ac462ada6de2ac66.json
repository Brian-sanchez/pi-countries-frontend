{"ast":null,"code":"//Aqui vamos a setear nuestro estado inicial\nconst initialState = {\n  countries: [],\n  countriesCopy: [],\n  detail: [],\n  activities: []\n}; //Aqui las acctions van a saber que hacer.\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_COUNTRIES\":\n      return { ...state,\n        countries: action.payload,\n        countriesCopy: action.payload\n      };\n\n    case \"GET_BY_NAME\":\n      return { ...state,\n        countries: action.payload\n      };\n\n    case \"GET_DETAIL\":\n      return { ...state,\n        detail: action.payload\n      };\n\n    case \"FILTER_BY_REGION\":\n      {\n        let countriesCopy = state.countriesCopy;\n        let filteredRegion = action.payload === \"All\" ? countriesCopy : countriesCopy.filter(f => f.continents === action.payload);\n        return { ...state,\n          countries: filteredRegion\n        };\n      }\n\n    case \"FILTER_BY_ACTIVITY\":\n      {\n        let countrieactivity = state.countriesCopy;\n        let filteractivity = action.payload === \"All\" ? countrieactivity : countrieactivity.filter(f => {\n          return f.activities.some(a => a.name === action.payload);\n        });\n        return { ...state,\n          countries: filteractivity\n        };\n      }\n\n    case \"ORDER_BY\":\n      {\n        let sortCountries;\n        let countries = state.countriesCopy;\n\n        if (action.payload === \"All\") {\n          return {\n            countries\n          };\n        }\n\n        if (action.payload === \"abc-asc\") {\n          sortCountries = state.countries.sort((a, b) => {\n            if (a.name > b.name) {\n              return -1;\n            }\n\n            if (a.name < b.name) {\n              return 1;\n            }\n\n            return 0;\n          });\n        }\n\n        if (action.payload === \"abc-des\") {\n          sortCountries = state.countries.sort((a, b) => {\n            if (a.name > b.name) {\n              return 1;\n            }\n\n            if (a.name < b.name) {\n              return -1;\n            }\n\n            return 0;\n          });\n        }\n\n        if (action.payload === \"pop-asc\") {\n          sortCountries = state.countries.sort((a, b) => {\n            return a.population - b.population;\n          });\n        }\n\n        if (action.payload === \"pop-des\") {\n          sortCountries = state.countries.sort((a, b) => {\n            return b.population - a.population;\n          });\n        }\n\n        return { ...state,\n          countries: sortCountries\n        };\n      }\n\n    case \"POST_ACTIVITY\":\n      {\n        return { ...state\n        };\n      }\n\n    case \"GET_ACTIVITIES\":\n      {\n        return { ...state,\n          activities: action.payload\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/Proyectos de Programacion/PI para hacer si o si henry/Pi-countries 3/PI-Countries-main/client/src/reducer/index.js"],"names":["initialState","countries","countriesCopy","detail","activities","reducer","state","action","type","payload","filteredRegion","filter","f","continents","countrieactivity","filteractivity","some","a","name","sortCountries","sort","b","population"],"mappings":"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","sourcesContent":["//Aqui vamos a setear nuestro estado inicial\r\nconst initialState = {\r\n    countries: [],\r\n    countriesCopy: [],\r\n    detail: [], \r\n    activities: []\r\n};\r\n\r\n//Aqui las acctions van a saber que hacer.\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"GET_COUNTRIES\":\r\n            return{\r\n                ...state,\r\n                countries: action.payload,\r\n                countriesCopy: action.payload,\r\n            }\r\n        case \"GET_BY_NAME\":\r\n            return{\r\n                ...state,\r\n                countries: action.payload\r\n            }\r\n        case \"GET_DETAIL\":\r\n            return{\r\n                ...state,\r\n                detail: action.payload\r\n            }\r\n        case \"FILTER_BY_REGION\":{\r\n            let countriesCopy = state.countriesCopy;\r\n            let filteredRegion =\r\n                action.payload === \"All\"\r\n                    ? countriesCopy\r\n                    : countriesCopy.filter((f) => f.continents === action.payload);\r\n            return {\r\n                ...state,\r\n                countries: filteredRegion,\r\n            };\r\n        }\r\n        case \"FILTER_BY_ACTIVITY\":{\r\n            let countrieactivity = state.countriesCopy;\r\n            let filteractivity= action.payload === \"All\" ? \r\n            countrieactivity \r\n            : countrieactivity.filter((f) => {\r\n                return f.activities.some((a)=> a.name === action.payload)\r\n            });\r\n                \r\n            \r\n                return {\r\n                    ...state,\r\n                    countries: filteractivity\r\n                }\r\n            \r\n        }\r\n        case \"ORDER_BY\":{\r\n            let sortCountries;\r\n            let countries= state.countriesCopy;\r\n            if (action.payload === \"All\"){\r\n                return {countries}\r\n            }\r\n            if (action.payload === \"abc-asc\"){\r\n                sortCountries = state.countries.sort((a,b)=>{\r\n                    if (a.name > b.name){\r\n                        return -1;\r\n                    }\r\n                    if (a.name<b.name){\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n\r\n            }\r\n            if (action.payload === \"abc-des\"){\r\n                sortCountries = state.countries.sort((a,b)=>{\r\n                    if (a.name > b.name){\r\n                        return 1;\r\n                    }\r\n                    if (a.name<b.name){\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                })\r\n            }\r\n            if (action.payload === \"pop-asc\"){\r\n                sortCountries = state.countries.sort((a, b)=> {\r\n                    return a.population - b.population;\r\n                })\r\n            }\r\n            if (action.payload === \"pop-des\"){\r\n                sortCountries = state.countries.sort((a, b)=> {\r\n                    return b.population - a.population;\r\n                })\r\n            }\r\n            \r\n            return{\r\n                ...state,\r\n                countries: sortCountries,\r\n            }\r\n        }\r\n        case \"POST_ACTIVITY\":{\r\n            return{\r\n                ...state\r\n            }\r\n        }\r\n        case \"GET_ACTIVITIES\":{\r\n            return{\r\n                ...state,\r\n                activities: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return{\r\n                ...state,\r\n            }\r\n            \r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}