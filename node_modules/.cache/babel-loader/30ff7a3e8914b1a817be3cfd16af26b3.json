{"ast":null,"code":"//Aqui vamos a setear nuestro estado inicial\nconst initialState = {\n  countries: [],\n  // Almacenamos los paises que obtenemos en los case \"GET_BY_NAME\" y los filtros\n  allCountries: [],\n  // Aqui estarian todos los paises\n  detail: [],\n  // El detalle del pais\n  activities: [] // Las actividades del pais\n\n}; //Aqui las acctions van a saber que hacer.\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_COUNTRIES\":\n      let c = state.countries;\n      console.log(c);\n      return { ...state,\n        countries: action.payload,\n        allCountries: action.payload //quiero que éste estado tambien me guarde todos los personajes para limpiar el filtro\n\n      };\n\n    case \"GET_BY_NAME\":\n      let a = state.countries;\n      console.log(a);\n      return { ...state,\n        countries: action.payload\n      };\n\n    case \"GET_DETAIL\":\n      return { ...state,\n        detail: action.payload\n      };\n\n    case \"FILTER_BY_REGION\":\n      {\n        let allCountries = state.allCountries;\n        let c = state.countries;\n        console.log(c);\n        let filteredRegion = action.payload === \"All\" ? allCountries : allCountries.filter(f => f.continents === action.payload);\n        return { ...state,\n          countries: filteredRegion\n        };\n      }\n\n    case \"FILTER_BY_ACTIVITY\":\n      {\n        let countrieactivity = state.allCountries;\n        console.log(countrieactivity);\n        let filteractivity = action.payload === \"All\" ? countrieactivity : countrieactivity.filter(f => {\n          return f.activities.some(a => a.name === action.payload);\n        });\n        let c = state.countries;\n        console.log(c);\n        return { ...state,\n          countries: filteractivity\n        };\n      }\n\n    case \"ORDER_BY\":\n      {\n        let sortCountries;\n        let allCountries = state.allCountries;\n\n        if (action.payload === \"All\") {\n          return allCountries;\n        }\n\n        ;\n\n        if (action.payload === \"abc-asc\") {\n          sortCountries = state.countries.sort((a, b) => {\n            if (a.name > b.name) {\n              return -1;\n            }\n\n            ;\n\n            if (a.name < b.name) {\n              return 1;\n            }\n\n            ;\n            return 0;\n          });\n        }\n\n        ;\n\n        if (action.payload === \"abc-des\") {\n          sortCountries = state.countries.sort((a, b) => {\n            if (a.name > b.name) {\n              return 1;\n            }\n\n            ;\n\n            if (a.name < b.name) {\n              return -1;\n            }\n\n            ;\n            return 0;\n          });\n        }\n\n        ;\n\n        if (action.payload === \"pop-asc\") {\n          sortCountries = state.countries.sort((a, b) => {\n            return a.population - b.population;\n          });\n        }\n\n        ;\n\n        if (action.payload === \"pop-des\") {\n          sortCountries = state.countries.sort((a, b) => {\n            return b.population - a.population;\n          });\n        }\n\n        ;\n        return { ...state,\n          countries: sortCountries\n        };\n      }\n\n    case \"POST_ACTIVITY\":\n      {\n        return { ...state\n        };\n      }\n\n    case \"GET_ACTIVITIES\":\n      {\n        return { ...state,\n          activities: action.payload\n        };\n      }\n\n    case \"RESET_DETAIL\":\n      {\n        return { ...state,\n          detail: []\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n\n  ;\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/Cosas de Programacion/Proyectos de Programacion/Proyectos SoyHenry/PI para hacer si o si henry/Pi-countries 3/PI-Countries-main/client/src/reducer/index.js"],"names":["initialState","countries","allCountries","detail","activities","reducer","state","action","type","c","console","log","payload","a","filteredRegion","filter","f","continents","countrieactivity","filteractivity","some","name","sortCountries","sort","b","population"],"mappings":"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","sourcesContent":["//Aqui vamos a setear nuestro estado inicial\r\nconst initialState = {\r\n    countries: [], // Almacenamos los paises que obtenemos en los case \"GET_BY_NAME\" y los filtros\r\n    allCountries: [], // Aqui estarian todos los paises\r\n    detail: [], // El detalle del pais\r\n    activities: [] // Las actividades del pais\r\n};\r\n\r\n//Aqui las acctions van a saber que hacer.\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"GET_COUNTRIES\":\r\n            let c = state.countries;\r\n            console.log(c);\r\n           return {\r\n                ...state,\r\n                countries: action.payload,\r\n                allCountries: action.payload, //quiero que éste estado tambien me guarde todos los personajes para limpiar el filtro\r\n            }\r\n\r\n        case \"GET_BY_NAME\":\r\n            let a = state.countries;\r\n            console.log(a);\r\n            return {\r\n                ...state,\r\n                countries: action.payload\r\n            }\r\n\r\n        case \"GET_DETAIL\":\r\n            return {\r\n                ...state,\r\n                detail: action.payload\r\n            }\r\n\r\n        case \"FILTER_BY_REGION\": {\r\n            let allCountries = state.allCountries;\r\n\r\n            let c = state.countries;\r\n            console.log(c);\r\n\r\n            let filteredRegion =\r\n                action.payload === \"All\"\r\n                    ? allCountries\r\n                    : allCountries.filter((f) => f.continents === action.payload);      \r\n            return {\r\n                ...state,\r\n                countries: filteredRegion,\r\n            };\r\n        }\r\n\r\n        case \"FILTER_BY_ACTIVITY\":{\r\n            let countrieactivity = state.allCountries;\r\n\r\n            console.log(countrieactivity)\r\n\r\n            let filteractivity= action.payload === \"All\" ? \r\n            countrieactivity \r\n            : countrieactivity.filter((f) => {\r\n                return f.activities.some((a) => a.name === action.payload)\r\n            });\r\n\r\n            let c = state.countries;\r\n            console.log(c);\r\n            \r\n            return {\r\n                ...state,\r\n                countries: filteractivity\r\n            }\r\n        }\r\n\r\n        case \"ORDER_BY\": {\r\n            let sortCountries;\r\n            let allCountries = state.allCountries;\r\n\r\n            if (action.payload === \"All\") {\r\n                return allCountries;\r\n            };\r\n\r\n            if (action.payload === \"abc-asc\") {\r\n                sortCountries = state.countries.sort((a,b) => {\r\n                    if (a.name > b.name) {\r\n                        return -1;\r\n                    };\r\n\r\n                    if (a.name < b.name) {\r\n                        return 1;\r\n                    };\r\n\r\n                    return 0;\r\n                });\r\n            };\r\n            \r\n            if (action.payload === \"abc-des\") {\r\n                sortCountries = state.countries.sort((a,b) => {\r\n                    if (a.name > b.name) {\r\n                        return 1;\r\n                    };\r\n\r\n                    if (a.name<b.name) {\r\n                        return -1;\r\n                    };\r\n\r\n                    return 0;\r\n                });\r\n            };\r\n\r\n            if (action.payload === \"pop-asc\") {\r\n                sortCountries = state.countries.sort((a, b) => {\r\n                    return a.population - b.population;\r\n                });\r\n            };\r\n\r\n            if (action.payload === \"pop-des\") {\r\n                sortCountries = state.countries.sort((a, b) => {\r\n                    return b.population - a.population;\r\n                });\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                countries: sortCountries,\r\n            };\r\n        }\r\n\r\n        case \"POST_ACTIVITY\": {\r\n            return {\r\n                ...state\r\n            };\r\n        }\r\n\r\n        case \"GET_ACTIVITIES\":{\r\n            return {\r\n                ...state,\r\n                activities: action.payload\r\n            };\r\n        }\r\n\r\n        case \"RESET_DETAIL\":{\r\n            return {\r\n                ...state,\r\n                detail: []\r\n            };\r\n        }\r\n\r\n        default:\r\n            return {\r\n            ...state,    \r\n        }\r\n            \r\n    };\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}